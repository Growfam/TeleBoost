// frontend/pages/login/login.js
/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—Ö–æ–¥—É TeleBoost
 * Production –≤–µ—Ä—Å—ñ—è
 * FIXED: –î–æ–¥–∞–Ω–æ –≤–∏–∫–ª–∏–∫ tg.ready() —Ç–∞ –ø–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 */

import TelegramAuth from '/frontend/shared/auth/TelegramAuth.js';
import { ToastProvider } from '/frontend/shared/components/Toast.js';

class LoginPage {
  constructor() {
    this.telegramAuth = null;
    this.debugInfo = [];
  }

  /**
   * –î–æ–¥–∞—Ç–∏ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
   */
  addDebugInfo(message) {
    this.debugInfo.push(`[${new Date().toISOString()}] ${message}`);
    console.log(`LoginPage: ${message}`);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  async init() {
    this.addDebugInfo('Starting login page initialization...');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Toast –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const toastProvider = new ToastProvider();
    toastProvider.init();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    const hasAuth = await this.checkExistingAuth();
    if (hasAuth) {
      this.addDebugInfo('Existing auth found, redirecting...');
      return; // –í–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∏
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Web App –∑ –ø–æ–≤–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é
    await this.initTelegram();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    this.initAuthComponent();
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  async checkExistingAuth() {
    try {
      const authData = JSON.parse(localStorage.getItem('auth') || '{}');

      if (authData.access_token && authData.user) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞
        if (authData.expires_at) {
          const expiresAt = new Date(authData.expires_at);
          if (expiresAt > new Date()) {
            // –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
            window.location.href = '/home';
            return true;
          }
        }
      }
    } catch (error) {
      localStorage.removeItem('auth');
      this.addDebugInfo(`Error checking existing auth: ${error.message}`);
    }

    return false;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Web App
   */
  async initTelegram() {
    this.addDebugInfo('Initializing Telegram WebApp...');

    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;

      // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ ready()
      this.addDebugInfo(`Before ready() - Platform: ${tg.platform}, Version: ${tg.version}`);
      this.addDebugInfo(`Before ready() - initData exists: ${!!tg.initData}`);
      this.addDebugInfo(`Before ready() - initDataUnsafe exists: ${!!tg.initDataUnsafe}`);

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ ready() —ñ —á–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏
      try {
        tg.ready();
        this.addDebugInfo('Called tg.ready()');

        // –ß–µ–∫–∞—î–º–æ 100–º—Å –ø—ñ—Å–ª—è ready()
        await new Promise(resolve => setTimeout(resolve, 100));

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è ready()
        this.addDebugInfo(`After ready() - initData exists: ${!!tg.initData}`);
        this.addDebugInfo(`After ready() - initData length: ${tg.initData ? tg.initData.length : 0}`);

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–º—É —Ç–∞ —Ä–æ–∑—à–∏—Ä—é—î–º–æ
        tg.expand();
        tg.setHeaderColor('#1a0033');
        tg.setBackgroundColor('#000000');

        this.addDebugInfo('Telegram WebApp configured successfully');

        // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î initData, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        if (!tg.initData) {
          this.addDebugInfo('No initData after ready(), waiting 1 second...');
          await new Promise(resolve => setTimeout(resolve, 1000));

          // –í–∏–∫–ª–∏–∫–∞—î–º–æ ready() —â–µ —Ä–∞–∑
          tg.ready();
          this.addDebugInfo('Called tg.ready() again');

          // –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
          this.addDebugInfo(`Final check - initData exists: ${!!tg.initData}`);
        }

      } catch (e) {
        this.addDebugInfo(`Error during Telegram init: ${e.message}`);
      }

      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
      this.diagnoseTelegramEnvironment();

    } else {
      this.addDebugInfo('Telegram WebApp not available');
    }
  }

  /**
   * –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  diagnoseTelegramEnvironment() {
    const tg = window.Telegram?.WebApp;
    if (!tg) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    const properties = [
      'initData',
      'initDataUnsafe',
      'version',
      'platform',
      'colorScheme',
      'themeParams',
      'isExpanded',
      'viewportHeight',
      'viewportStableHeight',
      'headerColor',
      'backgroundColor',
      'isClosingConfirmationEnabled',
      'MainButton',
      'BackButton'
    ];

    this.addDebugInfo('=== Telegram WebApp Properties ===');
    properties.forEach(prop => {
      try {
        const value = tg[prop];
        const type = typeof value;
        if (type === 'object' && value !== null) {
          this.addDebugInfo(`${prop}: ${JSON.stringify(value)}`);
        } else if (type === 'string' && value.length > 100) {
          this.addDebugInfo(`${prop}: [string, length: ${value.length}]`);
        } else {
          this.addDebugInfo(`${prop}: ${value} (${type})`);
        }
      } catch (e) {
        this.addDebugInfo(`${prop}: [Error: ${e.message}]`);
      }
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–æ–¥–∏
    const methods = ['ready', 'expand', 'close', 'sendData', 'openLink', 'openTelegramLink'];
    this.addDebugInfo('=== Telegram WebApp Methods ===');
    methods.forEach(method => {
      this.addDebugInfo(`${method}: ${typeof tg[method]}`);
    });

    // –í–∏–≤–æ–¥–∏–º–æ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –∫–æ–Ω—Å–æ–ª—å —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    if (window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')) {
      console.groupCollapsed('üì± Telegram WebApp Debug Info');
      this.debugInfo.forEach(line => console.log(line));
      console.groupEnd();
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  initAuthComponent() {
    this.addDebugInfo('Initializing auth component...');

    this.telegramAuth = new TelegramAuth({
      onSuccess: this.handleAuthSuccess.bind(this),
      onError: this.handleAuthError.bind(this)
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
    this.telegramAuth.init('auth-container');
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  handleAuthSuccess(authData) {
    this.addDebugInfo(`Auth success for user: ${authData.user.first_name}`);

    if (window.showToast) {
      window.showToast(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${authData.user.first_name}!`, 'success');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  handleAuthError(error) {
    this.addDebugInfo(`Auth error: ${error.message}`);

    let errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';

    if (error.message?.includes('–≤—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram')) {
      errorMessage = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram';
    }

    if (window.showToast) {
      window.showToast(errorMessage, 'error');
    }

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const authContainer = document.getElementById('auth-container');
    if (authContainer && !authContainer.querySelector('.retry-container')) {
      const retryHtml = `
        <div class="retry-container" style="text-align: center; margin-top: 20px;">
          <button class="retry-button" style="
            padding: 12px 24px;
            background: linear-gradient(135deg, #a855f7 0%, #9333ea 100%);
            border: none;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
          " onclick="window.location.reload()">
            –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
          </button>
        </div>
      `;
      authContainer.insertAdjacentHTML('beforeend', retryHtml);
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  destroy() {
    if (this.telegramAuth) {
      this.telegramAuth.destroy();
    }
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
document.addEventListener('DOMContentLoaded', () => {
  const loginPage = new LoginPage();
  loginPage.init();

  // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
  window.addEventListener('beforeunload', () => {
    loginPage.destroy();
  });

  // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è debug
  if (window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')) {
    window.loginPage = loginPage;
  }
});