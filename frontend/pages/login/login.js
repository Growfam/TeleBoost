// frontend/pages/login/login.js
/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ª–æ–≥—ñ–Ω—É TeleBoost
 * –í–ï–†–°–ò–Ø –° –ü–û–õ–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
 */

import TelegramAuth from '/frontend/shared/auth/TelegramAuth.js';
import { ToastProvider } from '/frontend/shared/components/Toast.js';

class LoginPage {
  constructor() {
    console.log('üü® LoginPage: Constructor called');
    this.telegramAuth = null;
    this.initAttempts = 0;
    this.maxInitAttempts = 5;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  async init() {
    console.log('üü® LoginPage: init() called');
    console.log('üü® LoginPage: Current URL:', window.location.href);
    console.log('üü® LoginPage: localStorage auth:', localStorage.getItem('auth') ? 'EXISTS' : 'NOT EXISTS');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Toast –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    console.log('üü® LoginPage: Initializing ToastProvider');
    const toastProvider = new ToastProvider();
    toastProvider.init();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    console.log('üü® LoginPage: Checking existing auth...');
    const hasAuth = await this.checkExistingAuth();
    if (hasAuth) {
      console.log('üü® LoginPage: User already authenticated, redirected to /home');
      return; // –í–∂–µ —Ä–µ–¥—ñ—Ä–µ–∫—Ç–Ω—É–ª–∏
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Web App
    console.log('üü® LoginPage: Initializing Telegram Web App');
    this.initTelegram();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    console.log('üü® LoginPage: Creating auth component');
    this.initAuthComponent();

    // –ê–Ω—ñ–º—É—î–º–æ –ø–æ—è–≤—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    console.log('üü® LoginPage: Animating page load');
    this.animatePageLoad();

    console.log('üü® LoginPage: Initialization completed');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  async checkExistingAuth() {
    console.log('üü® LoginPage: checkExistingAuth() called');

    try {
      const authRaw = localStorage.getItem('auth');
      console.log('üü® LoginPage: Raw auth data:', {
        exists: !!authRaw,
        length: authRaw?.length || 0,
        preview: authRaw ? authRaw.substring(0, 100) + '...' : 'null'
      });

      if (!authRaw) {
        console.log('üü® LoginPage: No auth data found');
        return false;
      }

      const authData = JSON.parse(authRaw);
      console.log('üü® LoginPage: Parsed auth data:', {
        hasAccessToken: !!authData.access_token,
        hasUser: !!authData.user,
        hasExpiresAt: !!authData.expires_at,
        userName: authData.user?.first_name
      });

      if (authData.access_token && authData.user) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
        if (authData.expires_at) {
          const expiresAt = new Date(authData.expires_at);
          const now = new Date();
          const isValid = expiresAt > now;

          console.log('üü® LoginPage: Token expiration check:', {
            expiresAt: expiresAt.toISOString(),
            now: now.toISOString(),
            isValid: isValid,
            timeLeft: isValid ? Math.floor((expiresAt - now) / 1000) + ' seconds' : 'EXPIRED'
          });

          if (isValid) {
            // –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
            console.log('üü® LoginPage: Valid token found, redirecting to /home');
            window.location.href = '/home';
            return true;
          } else {
            console.log('üü® LoginPage: Token expired, clearing auth');
            localStorage.removeItem('auth');
          }
        }
      }
    } catch (error) {
      console.error('üü® LoginPage: Error checking auth:', error);
      localStorage.removeItem('auth');
    }

    console.log('üü® LoginPage: No valid auth found');
    return false;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Web App
   */
  initTelegram() {
    console.log('üü® LoginPage: initTelegram() called');
    console.log('üü® LoginPage: window.Telegram:', !!window.Telegram);
    console.log('üü® LoginPage: window.Telegram.WebApp:', !!window.Telegram?.WebApp);

    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;

      console.log('üü® LoginPage: Telegram WebApp details:', {
        version: tg.version,
        platform: tg.platform,
        colorScheme: tg.colorScheme,
        viewportHeight: tg.viewportHeight,
        viewportStableHeight: tg.viewportStableHeight,
        isExpanded: tg.isExpanded,
        hasInitData: !!tg.initData,
        initDataLength: tg.initData?.length || 0
      });

      // –†–æ–∑—à–∏—Ä—é—î–º–æ –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
      tg.expand();
      console.log('üü® LoginPage: Called tg.expand()');

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—å–æ—Ä–∏
      tg.setHeaderColor('#1a0033');
      tg.setBackgroundColor('#000000');
      console.log('üü® LoginPage: Set header and background colors');

      // –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
      tg.ready();
      console.log('üü® LoginPage: Called tg.ready()');

      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É
      if (window.CONFIG?.DEBUG) {
        console.log('üü® LoginPage: DEBUG - Telegram WebApp initialized:', {
          initData: tg.initData,
          user: tg.initDataUnsafe?.user,
          startParam: tg.initDataUnsafe?.start_param
        });
      }

      // –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –∞–≤—Ç–æ–ª–æ–≥—ñ–Ω –ø—ñ—Å–ª—è ready
      console.log('üü® LoginPage: Scheduling auto-login attempt');
      this.attemptAutoLogin();
    } else {
      console.log('üü® LoginPage: Telegram WebApp not available, showing browser warning');
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω Telegram
      this.showBrowserWarning();
    }
  }

  /**
   * –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–ª–æ–≥—ñ–Ω—É
   */
  attemptAutoLogin() {
    console.log('üü® LoginPage: attemptAutoLogin() called, attempt', this.initAttempts + 1);

    // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —â–æ–± initData –±—É–ª–∞ –≥–æ—Ç–æ–≤–∞
    setTimeout(() => {
      const tg = window.Telegram?.WebApp;

      console.log('üü® LoginPage: Auto-login check:', {
        hasTelegram: !!tg,
        hasInitData: !!tg?.initData,
        hasTelegramAuth: !!this.telegramAuth,
        attempt: this.initAttempts + 1
      });

      if (tg?.initData && this.telegramAuth) {
        console.log('üü® LoginPage: Attempting auto-login with Telegram data');
        this.telegramAuth.handleAuth();
      } else if (this.initAttempts < this.maxInitAttempts) {
        // –ü—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –±—ñ–ª—å—à–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        this.initAttempts++;
        const nextDelay = 200 * this.initAttempts;
        console.log(`üü® LoginPage: No initData yet, retrying in ${nextDelay}ms`);
        setTimeout(() => this.attemptAutoLogin(), nextDelay);
      } else {
        console.log('üü® LoginPage: Max auto-login attempts reached, giving up');
      }
    }, 100);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
   */
  showBrowserWarning() {
    console.log('üü® LoginPage: showBrowserWarning() called');

    const warningHtml = `
      <div class="browser-warning glass-card animate-fadeIn">
        <div class="warning-icon">‚ö†Ô∏è</div>
        <h3 class="warning-title">Telegram Required</h3>
        <p class="warning-text">
          –¶–µ–π –¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ Telegram.
          <br>
          –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram.
        </p>
        <a href="https://t.me/${window.CONFIG?.BOT_USERNAME || 'TeleeBoost_bot'}" 
           class="btn btn-primary" 
           target="_blank">
          –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Telegram
        </a>
      </div>
    `;

    // –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤ auth-container
    const authContainer = document.getElementById('auth-container');
    if (authContainer) {
      authContainer.innerHTML = warningHtml;
      console.log('üü® LoginPage: Browser warning displayed');
    } else {
      console.error('üü® LoginPage: auth-container not found');
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  initAuthComponent() {
    console.log('üü® LoginPage: initAuthComponent() called');

    this.telegramAuth = new TelegramAuth({
      onSuccess: this.handleAuthSuccess.bind(this),
      onError: this.handleAuthError.bind(this),
      showUserInfo: false,
      autoLogin: true // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ —è–∫—â–æ —î –¥–∞–Ω—ñ –≤—ñ–¥ Telegram
    });

    console.log('üü® LoginPage: TelegramAuth instance created');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
    this.telegramAuth.init('auth-container');
    console.log('üü® LoginPage: TelegramAuth initialized in auth-container');
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  handleAuthSuccess(authData) {
    console.log('üü® LoginPage: handleAuthSuccess() called');
    console.log('üü® LoginPage: Auth data received:', {
      hasTokens: !!authData.tokens,
      hasUser: !!authData.user,
      userName: authData.user?.first_name,
      userId: authData.user?.telegram_id
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ localStorage
    const savedAuth = localStorage.getItem('auth');
    console.log('üü® LoginPage: Checking saved auth:', {
      exists: !!savedAuth,
      length: savedAuth?.length || 0
    });

    if (window.showToast) {
      const message = `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${authData.user.first_name}!`;
      console.log('üü® LoginPage: Showing success toast:', message);
      window.showToast(message, 'success');
    }

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    console.log('üü® LoginPage: Scheduling redirect to /home in 1 second');
    setTimeout(() => {
      console.log('üü® LoginPage: Redirecting to /home');
      window.location.href = '/home';
    }, 1000);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  handleAuthError(error) {
    console.error('üü® LoginPage: handleAuthError() called:', {
      message: error.message,
      code: error.code,
      stack: error.stack
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
    let errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';

    if (error.message?.includes('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')) {
      errorMessage = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram';
      console.log('üü® LoginPage: Telegram not available, showing browser warning');
      this.showBrowserWarning();
      return;
    } else if (error.code === 'INVALID_TELEGRAM_DATA') {
      errorMessage = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞.';
    } else if (error.code === 'USER_CREATION_FAILED') {
      errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.';
    }

    console.log('üü® LoginPage: Error message to show:', errorMessage);

    if (window.showToast) {
      window.showToast(errorMessage, 'error');
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const errorContainer = document.createElement('div');
    errorContainer.className = 'error-container animate-fadeIn';
    errorContainer.innerHTML = `
      <p class="error-message">
        ${error.message || errorMessage}
      </p>
    `;

    const authContainer = document.getElementById('auth-container');
    if (authContainer && !authContainer.querySelector('.browser-warning')) {
      authContainer.appendChild(errorContainer);
      console.log('üü® LoginPage: Error message displayed in UI');

      // –í–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        errorContainer.remove();
        console.log('üü® LoginPage: Error message removed');
      }, 5000);
    }
  }

  /**
   * –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  animatePageLoad() {
    console.log('üü® LoginPage: animatePageLoad() called');

    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó CSS –∞–Ω—ñ–º–∞—Ü—ñ–π
    document.body.classList.add('page-loaded');

    // –ê–Ω—ñ–º—É—î–º–æ features –ø–æ —á–µ—Ä–∑—ñ
    const features = document.querySelectorAll('.feature-item');
    console.log(`üü® LoginPage: Found ${features.length} feature items to animate`);

    features.forEach((feature, index) => {
      setTimeout(() => {
        feature.classList.add('animate-slideInLeft');
      }, 100 * index);
    });
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  destroy() {
    console.log('üü® LoginPage: destroy() called');
    if (this.telegramAuth) {
      this.telegramAuth.destroy();
      console.log('üü® LoginPage: TelegramAuth destroyed');
    }
  }
}

// –°—Ç–∏–ª—ñ –¥–ª—è browser warning
const warningStyles = `
<style>
.browser-warning {
  max-width: 320px;
  margin: 0 auto;
  padding: 32px;
  text-align: center;
}

.warning-icon {
  font-size: 48px;
  margin-bottom: 16px;
}

.warning-title {
  font-size: 20px;
  font-weight: 600;
  margin-bottom: 12px;
  color: var(--text-primary);
}

.warning-text {
  font-size: 14px;
  color: var(--text-secondary);
  margin-bottom: 24px;
  line-height: 1.5;
}

.browser-warning .btn {
  width: 100%;
}
</style>
`;

// –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
if (!document.getElementById('warning-styles')) {
  console.log('üü® LoginPage: Adding warning styles');
  const styleElement = document.createElement('div');
  styleElement.id = 'warning-styles';
  styleElement.innerHTML = warningStyles;
  document.head.appendChild(styleElement);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
document.addEventListener('DOMContentLoaded', () => {
  console.log('üü® LoginPage: DOMContentLoaded event fired');
  console.log('üü® LoginPage: Page URL:', window.location.href);
  console.log('üü® LoginPage: Creating LoginPage instance');

  const loginPage = new LoginPage();
  loginPage.init();

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –¥–µ–±–∞–≥—É
  if (window.CONFIG?.DEBUG) {
    window.loginPage = loginPage;
    console.log('üü® LoginPage: DEBUG - loginPage instance exposed to window');
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('beforeunload', () => {
  console.log('üü® LoginPage: beforeunload event fired');
  if (window.loginPage) {
    window.loginPage.destroy();
  }
});

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
window.addEventListener('error', (event) => {
  console.error('üü® LoginPage: Global error:', {
    message: event.message,
    filename: event.filename,
    lineno: event.lineno,
    colno: event.colno,
    error: event.error
  });
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('üü® LoginPage: Unhandled promise rejection:', {
    reason: event.reason,
    promise: event.promise
  });
});

console.log('üü® LoginPage: Script loaded successfully');