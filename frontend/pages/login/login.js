// frontend/pages/login/login.js
/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—Ö–æ–¥—É TeleBoost
 * Production –≤–µ—Ä—Å—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ TelegramWebApp —Å–µ—Ä–≤—ñ—Å—É
 */

import TelegramAuth from '/frontend/shared/auth/TelegramAuth.js';
import { ToastProvider } from '/frontend/shared/components/Toast.js';
import telegramWebApp from '/frontend/shared/services/TelegramWebApp.js';

class LoginPage {
  constructor() {
    this.telegramAuth = null;
    this.debugInfo = [];
  }

  /**
   * –î–æ–¥–∞—Ç–∏ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
   */
  addDebugInfo(message) {
    this.debugInfo.push(`[${new Date().toISOString()}] ${message}`);
    console.log(`LoginPage: ${message}`);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  async init() {
    this.addDebugInfo('Starting login page initialization...');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Toast –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const toastProvider = new ToastProvider();
    toastProvider.init();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    const hasAuth = await this.checkExistingAuth();
    if (hasAuth) {
      this.addDebugInfo('Existing auth found, redirecting...');
      return; // –í–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∏
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Web App —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
    this.addDebugInfo('Initializing Telegram WebApp service...');
    const initialized = await telegramWebApp.init();
    this.addDebugInfo(`TelegramWebApp service initialized: ${initialized}`);

    // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    this.diagnoseTelegramEnvironment();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    this.initAuthComponent();
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  async checkExistingAuth() {
    try {
      const authData = JSON.parse(localStorage.getItem('auth') || '{}');

      if (authData.access_token && authData.user) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞
        if (authData.expires_at) {
          const expiresAt = new Date(authData.expires_at);
          if (expiresAt > new Date()) {
            // –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
            window.location.href = '/home';
            return true;
          }
        }
      }
    } catch (error) {
      localStorage.removeItem('auth');
      this.addDebugInfo(`Error checking existing auth: ${error.message}`);
    }

    return false;
  }

  /**
   * –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   */
  diagnoseTelegramEnvironment() {
    const tg = telegramWebApp.getTelegramWebApp();
    if (!tg) {
      this.addDebugInfo('Telegram WebApp not available');
      return;
    }

    // –û—Å–Ω–æ–≤–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    this.addDebugInfo(`Platform: ${tg.platform}`);
    this.addDebugInfo(`Version: ${tg.version}`);
    this.addDebugInfo(`ColorScheme: ${tg.colorScheme}`);
    this.addDebugInfo(`IsExpanded: ${tg.isExpanded}`);
    this.addDebugInfo(`ViewportHeight: ${tg.viewportHeight}`);

    // –î–∞–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    const initData = telegramWebApp.getInitData();
    const initDataUnsafe = telegramWebApp.getInitDataUnsafe();

    this.addDebugInfo(`InitData exists: ${!!initData}`);
    this.addDebugInfo(`InitData length: ${initData ? initData.length : 0}`);

    if (initDataUnsafe) {
      this.addDebugInfo(`InitDataUnsafe keys: ${Object.keys(initDataUnsafe).join(', ')}`);
      if (initDataUnsafe.user) {
        this.addDebugInfo(`User ID: ${initDataUnsafe.user.id}`);
        this.addDebugInfo(`Username: ${initDataUnsafe.user.username}`);
        this.addDebugInfo(`First name: ${initDataUnsafe.user.first_name}`);
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ Telegram WebApp
    const isTelegramWebApp = telegramWebApp.isTelegramWebApp();
    this.addDebugInfo(`Is Telegram WebApp: ${isTelegramWebApp}`);

    // –í–∏–≤–æ–¥–∏–º–æ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –∫–æ–Ω—Å–æ–ª—å
    if (window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')) {
      console.groupCollapsed('üì± LoginPage Debug Info');
      this.debugInfo.forEach(line => console.log(line));
      console.groupEnd();
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  initAuthComponent() {
    this.addDebugInfo('Initializing auth component...');

    this.telegramAuth = new TelegramAuth({
      onSuccess: this.handleAuthSuccess.bind(this),
      onError: this.handleAuthError.bind(this)
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
    this.telegramAuth.init('auth-container');
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  handleAuthSuccess(authData) {
    this.addDebugInfo(`Auth success for user: ${authData.user.first_name}`);

    if (window.showToast) {
      window.showToast(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${authData.user.first_name}!`, 'success');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  handleAuthError(error) {
    this.addDebugInfo(`Auth error: ${error.message}`);

    let errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';

    if (error.message?.includes('–≤—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram')) {
      errorMessage = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram';
    }

    if (window.showToast) {
      window.showToast(errorMessage, 'error');
    }

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const authContainer = document.getElementById('auth-container');
    if (authContainer && !authContainer.querySelector('.retry-container')) {
      const retryHtml = `
        <div class="retry-container" style="text-align: center; margin-top: 20px;">
          <button class="retry-button" style="
            padding: 12px 24px;
            background: linear-gradient(135deg, #a855f7 0%, #9333ea 100%);
            border: none;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
          " onclick="window.location.reload()">
            –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
          </button>
        </div>
      `;
      authContainer.insertAdjacentHTML('beforeend', retryHtml);
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  destroy() {
    if (this.telegramAuth) {
      this.telegramAuth.destroy();
    }
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
document.addEventListener('DOMContentLoaded', () => {
  const loginPage = new LoginPage();
  loginPage.init();

  // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
  window.addEventListener('beforeunload', () => {
    loginPage.destroy();
  });

  // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è debug
  if (window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')) {
    window.loginPage = loginPage;
  }
});