# backend/utils/formatters.py
"""
TeleBoost Formatters
–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
"""
import re
from datetime import datetime, timezone
from typing import Optional, Union
import hashlib

from backend.utils.constants import TELEGRAM_LIMITS


def format_price(amount: Union[int, float], currency: str = 'UAH', decimals: int = 2) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏

    Args:
        amount: –°—É–º–∞
        currency: –í–∞–ª—é—Ç–∞ (UAH, USD, USDT)
        decimals: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞
    """
    if currency in ['USDT', 'USD']:
        # –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Ç–∞ –¥–æ–ª–∞—Ä—ñ–≤
        return f"{amount:,.{decimals}f} {currency}"
    elif currency == 'UAH':
        # –î–ª—è –≥—Ä–∏–≤–Ω—ñ
        return f"{amount:,.{decimals}f} ‚Ç¥"
    else:
        return f"{amount:,.{decimals}f} {currency}"


def format_number(number: Union[int, float], decimals: int = 0) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞ –∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞–º–∏ —Ç–∏—Å—è—á"""
    if decimals > 0:
        return f"{number:,.{decimals}f}"
    return f"{int(number):,}"


def format_datetime(dt: Union[datetime, str], format: str = 'full') -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É

    Args:
        dt: –î–∞—Ç–∞ (datetime –æ–±'—î–∫—Ç –∞–±–æ ISO string)
        format: –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É ('full', 'date', 'time', 'short', 'iso')

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞
    """
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç—Ä–æ–∫—É –≤ datetime —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if isinstance(dt, str):
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ —è–∫—â–æ —î
            if '.' in dt:
                dt = dt.split('.')[0] + 'Z' if dt.endswith('Z') else dt.split('.')[0]
            dt = datetime.fromisoformat(dt.replace('Z', '+00:00'))
        except:
            return dt

    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ —î timezone
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    if format == 'full':
        return dt.strftime('%d.%m.%Y %H:%M:%S')
    elif format == 'date':
        return dt.strftime('%d.%m.%Y')
    elif format == 'time':
        return dt.strftime('%H:%M:%S')
    elif format == 'short':
        return dt.strftime('%d.%m %H:%M')
    elif format == 'iso':
        return dt.isoformat()
    else:
        return str(dt)


def format_telegram_username(username: Optional[str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è Telegram username

    Args:
        username: Username

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π username –∑ @
    """
    if not username:
        return 'Anonymous'

    # –í–∏–¥–∞–ª—è—î–º–æ @ —è–∫—â–æ —î –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    username = username.lstrip('@')

    # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
    if len(username) > TELEGRAM_LIMITS['USERNAME_MAX_LENGTH']:
        username = username[:TELEGRAM_LIMITS['USERNAME_MAX_LENGTH']]

    return f"@{username}"


def format_telegram_name(first_name: str, last_name: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        first_name: –Ü–º'—è
        last_name: –ü—Ä—ñ–∑–≤–∏—â–µ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –ü–æ–≤–Ω–µ —ñ–º'—è
    """
    # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
    if len(first_name) > TELEGRAM_LIMITS['FIRST_NAME_MAX_LENGTH']:
        first_name = first_name[:TELEGRAM_LIMITS['FIRST_NAME_MAX_LENGTH']]

    if last_name:
        if len(last_name) > TELEGRAM_LIMITS['LAST_NAME_MAX_LENGTH']:
            last_name = last_name[:TELEGRAM_LIMITS['LAST_NAME_MAX_LENGTH']]
        return f"{first_name} {last_name}"

    return first_name


def format_order_id(order_id: Union[int, str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

    Args:
        order_id: ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π ID
    """
    return f"#{str(order_id).zfill(6)}"


def format_payment_id(payment_id: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ID –ø–ª–∞—Ç–µ–∂—É

    Args:
        payment_id: ID –ø–ª–∞—Ç–µ–∂—É

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π ID
    """
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    if len(payment_id) > 12:
        return f"{payment_id[:6]}...{payment_id[-4:]}"
    return payment_id


def format_percentage(value: float, decimals: int = 2) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤

    Args:
        value: –ó–Ω–∞—á–µ–Ω–Ω—è (0.1 = 10%)
        decimals: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏
    """
    percentage = value * 100
    return f"{percentage:.{decimals}f}%"


def format_status(status: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    Args:
        status: –°—Ç–∞—Ç—É—Å (pending, completed, etc.)

    Returns:
        –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑ –µ–º–æ–¥–∑—ñ
    """
    status_map = {
        # Order statuses
        'pending': '‚è≥ –û—á—ñ–∫—É—î—Ç—å—Å—è',
        'processing': '‚öôÔ∏è –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è',
        'in_progress': 'üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è',
        'completed': '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ',
        'partial': '‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ',
        'cancelled': '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ',
        'failed': '‚ùå –ü–æ–º–∏–ª–∫–∞',

        # Payment statuses
        'waiting': '‚è≥ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
        'confirming': 'üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è',
        'confirmed': '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
        'sending': 'üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è',
        'partially_paid': '‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –æ–ø–ª–∞—á–µ–Ω–æ',
        'finished': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'refunded': '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ',
        'expired': '‚è∞ –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ',
    }

    return status_map.get(status, status.replace('_', ' ').title())


def format_service_type(service_type: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É —Å–µ—Ä–≤—ñ—Å—É

    Args:
        service_type: –¢–∏–ø —Å–µ—Ä–≤—ñ—Å—É

    Returns:
        –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–∏–ø
    """
    type_map = {
        'default': 'üë§ –ó–≤–∏—á–∞–π–Ω–∏–π',
        'package': 'üì¶ –ü–∞–∫–µ—Ç',
        'custom_comments': 'üí¨ –í–ª–∞—Å–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ',
        'mentions': 'üè∑Ô∏è –ó–≥–∞–¥–∫–∏',
        'poll': 'üìä –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è',
        'subscriptions': 'üîî –ü—ñ–¥–ø–∏—Å–∫–∏',
    }

    return type_map.get(service_type, service_type.replace('_', ' ').title())


def mask_sensitive_data(data: str, visible_chars: int = 4) -> str:
    """
    –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö

    Args:
        data: –î–∞–Ω—ñ –¥–ª—è –º–∞—Å–∫—É–≤–∞–Ω–Ω—è
        visible_chars: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∏–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤

    Returns:
        –ó–∞–º–∞—Å–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    """
    if not data or len(data) <= visible_chars * 2:
        return '****'

    return f"{data[:visible_chars]}{'*' * 6}{data[-visible_chars:]}"


def generate_referral_code(user_id: Union[int, str]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É

    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ö–µ—à –≤—ñ–¥ user_id
    hash_object = hashlib.md5(str(user_id).encode())
    hash_hex = hash_object.hexdigest()

    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 8 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Ä–æ–±–∏–º–æ uppercase
    return f"TB{hash_hex[:8].upper()}"


def truncate_text(text: str, max_length: int = 100, suffix: str = '...') -> str:
    """
    –û–±—Ä—ñ–∑–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏

    Args:
        text: –¢–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
        suffix: –°—É—Ñ—ñ–∫—Å –¥–ª—è –æ–±—Ä—ñ–∑–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É

    Returns:
        –û–±—Ä—ñ–∑–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    if not text or len(text) <= max_length:
        return text

    return text[:max_length - len(suffix)] + suffix


def clean_html(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤—ñ–¥ HTML —Ç–µ–≥—ñ–≤

    Args:
        text: –¢–µ–∫—Å—Ç –∑ HTML

    Returns:
        –û—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ''

    # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
    clean = re.compile('<.*?>')
    return re.sub(clean, '', text)


def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É

    Args:
        size_bytes: –†–æ–∑–º—ñ—Ä –≤ –±–∞–π—Ç–∞—Ö

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
    """
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0

    return f"{size_bytes:.2f} PB"


def pluralize_ukrainian(count: int, forms: tuple) -> str:
    """
    –í—ñ–¥–º—ñ–Ω—é–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –∑–∞ —á–∏—Å–ª–æ–º

    Args:
        count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å
        forms: –ö–æ—Ä—Ç–µ–∂ –∑ —Ç—Ä—å–æ—Ö —Ñ–æ—Ä–º (1, 2-4, 5+)
               –ù–∞–ø—Ä–∏–∫–ª–∞–¥: ('–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '–∑–∞–º–æ–≤–ª–µ–Ω—å')

    Returns:
        –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞
    """
    if count % 10 == 1 and count % 100 != 11:
        return forms[0]
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return forms[1]
    else:
        return forms[2]